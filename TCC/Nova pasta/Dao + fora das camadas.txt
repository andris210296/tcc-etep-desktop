namespace Padaria.DAO
{
    public class ClienteDAO
    {
        Conexao conexao = null;
        public ClienteDAO(string StringConexao)
        {
            conexao = new Conexao(StringConexao);
        }
       

// Você manda todas as informações para o banco de dados 

        public void Inserir(Cliente cliente)
        {
            string query = "";

            query += "INSERT INTO cliente(";
            query += "nome_cli,sx_cli,ec_cli,dtnasc_cli,cpf_cli,rg_cli,email_cli,senha_cli,tel_cli,";
            query += "cel_cli,rua_cli,num_cli,cidade_cli,bairro_cli,uf_cli,cep_cli,compl_cli) values ";
            query += "('" + cliente.NomeCliente + "','" +
                           cliente.SexoCliente + "','" +
                           cliente.EstadoCivilCliente + "','" +
                           cliente.DatanascimentoCliente + "','" +
                           cliente.CpfCliente + "','" +
                           cliente.RgCliente + "','" +
                           cliente.EmailCliente + "','" +
                           cliente.SenhaCliente + "','" +
                           cliente.TelefoneCliente + "','" +
                           cliente.CelularCliente + "','" +
                           cliente.RuaCliente + "','" +
                           cliente.NumeroCliente + "','" +
                           cliente.CidadeCliente + "','" +
                           cliente.BairroCliente + "','" +
                           cliente.UfCliente + "','" +
                           cliente.CepCliente + "','" +
                           cliente.ComplementoCliente + "')";

            conexao.ExecutarSemRetorno(query);
        }

// Lista de clientes, caso você vá consultar por cliente, é útil, além de que todas as variáveis estão convertinas, não deixa repetir.


        public List<Cliente> Selecionar()
        {
            string query = "Select * from cliente";

            List<Cliente> listaCliente = new List<Cliente>();

            foreach (DataRow dr in
                       conexao.ExcutarComRetorno(query).AsEnumerable())
            {
                Cliente cli = new Cliente();
                cli.IdCliente = Convert.ToInt32(dr["id_cli"]);
                cli.NomeCliente = dr["nome_cli"].ToString();
                cli.SexoCliente = dr["sx_cli"].ToString();
                cli.EstadoCivilCliente = dr["ec_cli"].ToString();
                cli.DatanascimentoCliente = dr["dtnasc_cli"].ToString();
                cli.CpfCliente = dr["cpf_cli"].ToString();
                cli.RgCliente = dr["rg_cli"].ToString();
                cli.EmailCliente = dr["email_cli"].ToString();
                cli.SenhaCliente = dr["senha_cli"].ToString();
                cli.TelefoneCliente = dr["tel_cli"].ToString();
                cli.CelularCliente = dr["cel_cli"].ToString();
                cli.RuaCliente = dr["rua_cli"].ToString();
                cli.NumeroCliente = Convert.ToInt32(dr["num_cli"]);
                cli.CidadeCliente = dr["cidade_cli"].ToString();
                cli.BairroCliente = dr["bairro_cli"].ToString();
                cli.UfCliente = dr["uf_cli"].ToString();
                cli.CepCliente = dr["cep_cli"].ToString();
                cli.ComplementoCliente = dr["compl_cli"].ToString();

                listaCliente.Add(cli);
            }
            return listaCliente;
        }

        // método excluir
        public void ExcluirCliente(Cliente cliente)
        {
            string query = "";
            query += "delete from cliente where id_cli=" + cliente.IdCliente;
            conexao.ExecutarSemRetorno(query);
        }

        public int SelecionarMaximoIdCli()
        {
            string query = "select max(id_cli) from cliente";
            int maxid = Convert.ToInt32(conexao.ExcutarComRetornoMaxIdCli(query));
            return maxid;
        }

        public void AlterarCliente(Cliente cliente)
        {
            string query = "";
            query += "update cliente set nome_cli='" + cliente.NomeCliente + "'" +
                                        ", sx_cli='" + cliente.SexoCliente + "'" +
                                        ", ec_cli='" + cliente.EstadoCivilCliente + "'" +
                                        ", dtnasc_cli='" + cliente.DatanascimentoCliente + "'" +
                                        ", cpf_cli='" + cliente.CpfCliente + "'" +
                                        ", rg_cli='" + cliente.RgCliente + "'" +
                                        ", email_cli='" + cliente.EmailCliente + "'" +
                                        ", senha_cli='" + cliente.SenhaCliente + "'" +
                                        ", tel_cli='" + cliente.TelefoneCliente + "'" +
                                        ", cel_cli='" + cliente.CelularCliente + "'" +
                                        ", rua_cli ='" + cliente.RuaCliente + "'" + 
                                        ", num_cli='" + cliente.NumeroCliente + "'" +
                                        ", bairro_cli='" + cliente.BairroCliente + "'" +
                                        ", cidade_cli='" + cliente.CidadeCliente + "'" +
                                        ", uf_cli='" + cliente.UfCliente + "'" +
                                        ", cep_cli='" + cliente.CepCliente + "'" +
                                        ", compl_cli='" + cliente.ComplementoCliente + "'" +
                                         " where id_cli="+ cliente.IdCliente;
            conexao.ExecutarSemRetorno(query);
        }
        
    }
}
 
A Dao no caso.





Código fora das camadas:

public bool isCPF(string valor)
    {
        if (valor == "")
            return false;

        string cpf = valor;

        int d1, d2;
        int soma = 0;
        string digitado = "";
        string calculado = "";

        // Pesos para calcular o primeiro digito
        int[] peso1 = new int[] { 10, 9, 8, 7, 6, 5, 4, 3, 2 };

        // Pesos para calcular o segundo digito
        int[] peso2 = new int[] { 11, 10, 9, 8, 7, 6, 5, 4, 3, 2 };
        int[] n = new int[11];

        // Se o tamanho for < 11 entao retorna como inválido
        if (cpf.Length != 11)
            return false;

        // Caso coloque todos os numeros iguais
        switch (cpf)
        {
            case "11111111111":
                return false;
            case "00000000000":
                return false;
            case "2222222222":
                return false;
            case "33333333333":
                return false;
            case "44444444444":
                return false;
            case "55555555555":
                return false;
            case "66666666666":
                return false;
            case "77777777777":
                return false;
            case "88888888888":
                return false;
            case "99999999999":
                return false;
        }

        try
        {
            // Quebra cada digito do CPF
            n[0] = Convert.ToInt32(cpf.Substring(0, 1));
            n[1] = Convert.ToInt32(cpf.Substring(1, 1));
            n[2] = Convert.ToInt32(cpf.Substring(2, 1));
            n[3] = Convert.ToInt32(cpf.Substring(3, 1));
            n[4] = Convert.ToInt32(cpf.Substring(4, 1));
            n[5] = Convert.ToInt32(cpf.Substring(5, 1));
            n = Convert.ToInt32(cpf.Substring(6, 1));
            n[7] = Convert.ToInt32(cpf.Substring(7, 1));
            n = Convert.ToInt32(cpf.Substring(8, 1));
            n[9] = Convert.ToInt32(cpf.Substring(9, 1));
            n[10] = Convert.ToInt32(cpf.Substring(10, 1));
        }
        catch
        {
            return false;
        }

        // Calcula cada digito com seu respectivo peso
        for (int i = 0; i <= peso1.GetUpperBound(0); i++)
            soma += (peso1 * Convert.ToInt32(n));

        // Pega o resto da divisao
        int resto = soma % 11;

        if (resto == 1 || resto == 0)
            d1 = 0;
        else
            d1 = 11 - resto;

        soma = 0;

        // Calcula cada digito com seu respectivo peso
        for (int i = 0; i <= peso2.GetUpperBound(0); i++)
            soma += (peso2 * Convert.ToInt32(n));

        // Pega o resto da divisao
        resto = soma % 11;
        if (resto == 1 || resto == 0)
            d2 = 0;
        else
            d2 = 11 - resto;

        calculado = d1.ToString() + d2.ToString();
        digitado = n[9].ToString() + n[10].ToString();

        // Se os ultimos dois digitos calculados bater com
        // os dois ultimos digitos do cpf entao é válido
        if (calculado == digitado)
            return (true);
        else
            return (false);
    }